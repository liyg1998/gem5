/*
 * Copyright (c) 2020 ARM Limited
 * All rights reserved
 *
 * The license below extends only to copyright in the software and shall
 * not be construed as granting a license to any other intellectual
 * property including but not limited to intellectual property relating
 * to a hardware implementation of the functionality of the software
 * licensed hereunder.  You may use the software subject to the license
 * terms below provided that you ensure that this notice is replicated
 * unmodified and in its entirety in all distributions of the software,
 * modified or unmodified, in source code or in binary form.
 *
 * Copyright (c) 2013 Mark D. Hill and David A. Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// Various class of messages that can be exchanged between the L0 and the L1
// controllers.

//一次请求（和scache消息类型）
enumeration(CoherenceClass, desc="...") {
  ReadBlkI,  desc="取指令请求，可Cache存储器空间取指且不引起数据Cache淘汰";
  ReadBlkIDVic, desc="带脏淘汰的取指令请求";
  FetchBlkI, desc="不进SCache的取指令请求，指令流访问不可cache空间或可Cache空间并引起数据淘汰";

  ReadBlk,  desc="读产生的取数请求（可Cache存储器空间），load类指令不命中Cache";
  ReadBlkDVic,  desc="读产生的带脏淘汰取数请求";
  ReadBlkMod,   desc="写产生的取数请求（可Cache存储器空间Store类指令不命中Cache）";
  ReadBlkModDVic,  desc="写产生的带脏淘汰的取数请求";

  ShareToDirty,  desc="写命中清洁共享状态的共享置脏（Store类指令名字Cache且非脏状态）";
  WrVictimBlk,  desc="Cache回写请求，指示核心Cache中脏数据淘汰到核外";
  EvictLocalBlk,  desc="本地Cache淘汰请求，请求核外逻辑按主存地址淘汰核外Cache和私有Cache中的相应数据块，脏数据回写到主存";
  EvictGlobalBlk,  desc="全局Cache淘汰请求，请求核外逻辑按主存地址淘汰核外Cache和私有Cache中的相应数据块，脏数据写回到主存";
  EvictECacheBlk,  desc="核外Cache刷新请求，按核外Cache条目号淘汰所有Cache中的相应数据块，脏数据回写到主存";
  ECFetchBlk,  desc="核外Cache读类与取请求，读取的数据只进核外Cache，不进核心Cache";
  ECFetchBlkMod,  desc="核外Cache写类预取请求，读取的数据只进核外Cache，不进核心Cache";

  ReadNCBlk,  desc="不可Cache读请求：支持读请求合并";
  WriteNCBlk, desc="不可Cache写请求：支持读请求合并";
  IORead,  desc="I/O读请求：带粒度和对应粒度的数据有效位，不支持读请求合并";
  IOWrite,  desc="I/O写请求，带粒度和对应粒度的数据有效位，支持按规则进行写请求的合并";

  INTReq,    desc="中断请求";

  ReadData,  desc="不装填SCache的读响应，带128字节数据";
  ReadDataShare,  desc="可Cache空间的带128字节数据的读响应，响应数据装填核心内Cache，并将核心内Cache状态修改为清洁共享";
  ReadDataDirty,  desc="可Cache空间的带128字节数据的读响应，响应数据装填核心内Cache，并将核心内Cache装填修改为脏独占";
  ChangeToDirtySuccess,  desc="置脏成功响应，无数据传输，响应将核心Cache状态改为脏独占";

  ChangeToDirtyFail,  desc="置脏失败响应，无数据传输，表示cleantodirty，sharetodirty失败，用于释放核内悬挂缓冲条目";
  WriteComplete,  desc="写完成响应，无数据传输";
  RequestComplete,  desc="请求处理完成响应，无数据传输。一般指示共享可Cache请求的一致性处理完毕";
  IllegalAddr,  desc="地址非法响应，无数据传输，可Cache或不可Cache请求地址非法或越界，I/O空间请求访问不存在的寄存器";
  INTReq,  desc="指示发向核心的中断请求";

  Release, desc="释放缓冲";
  GetR, desc="取数并释放缓冲";
  PutI, desc="置无效";
  GetI, desc="取数置无效";
  GetS, desc="取数置共享";

  NoDataResponse, desc="该回答携带一致性查询状态，但不携带数据";
  DataResponse, desc="该回答携带一致性查询状态，且携带数据";

  Nop,  desc="不触发任何LCPM行为";

}

//向GCPM发的全局请求
enumeration(CoherenceRequestType, desc="...") {
  //GRQ-GAK
  RdDataNC,    desc="数据不可cache读";
  WrDataNC,    desc="数据不可cache写";
  RdDataS,     desc="数据可cache读";
  RdDataM,     desc="数据可cache写";
  WbMtoI,      desc="数据淘汰";
  InvXtoM,     desc="独占请求，清除其他die的Cache副本";
  InvXtoI,     desc="全局刷新，清除系统所有Cache副本，脏数据回写主存";
  //RdIO,        desc="IO读访问";
  //WrIO,        desc="IO写访问";
  //INTReq,      desc="中断";

    //GSN-GRP
  PrbS,    desc="监听获得E/M状态数据，置无效Peer的副本，local期望拥有可写数据，独占";
  PrbNCS,  desc="";
  PrbI,      desc="置无效Peer Cache的数据副本，脏数据回写主存，local不需要数据";
}

//GCPM回复/响应LCPM的消息
enumeration(CoherenceResponseType, desc="...") {
  //GAK
  AckCpl,      desc="Home收齐所有监听回答";
  AckData,     desc="数据响应，无需状态TCache，不可cache读或IO读的响应";
  AckSData,    desc="数据响应，TTag可装填为S状态";
  AckEData,    desc="数据响应，TTag可装填为E状态";
  AckMData,    desc="数据响应，TTag可装填为M状态";
  AckFault,    desc="";

  //GRP
  RspI,        desc="Peer副本已置无效";
  RspIFwd,     desc="Peer副本已置无效，且已推送清洁数据给local";
  RspIFwdWb,   desc="Peer副本已置无效，且已推送脏数据给local，脏数据回写主存";
  RspIWb,      desc="Peer副本已置无效，未推送数据给local，脏数据回写主存";
  RspS,        desc="Peer保留S副本，没有推送数据";
  RspSFwd,     desc="Peer保留S副本，且已推送清洁数据给local";
  RspSFwdWb,   desc="Peer保留S副本，且已推送脏数据给local，脏数据回写主存";
}

// Class for messages sent between the L0 and the L1 controllers.
structure(CoherenceMsg, desc="...", interface="Message") {
  Addr addr,              desc="Physical address of the cache block";
  CoherenceClass Class,         desc="Type of message (GetS, GetX, PutX, etc)";
  RubyAccessMode AccessMode,    desc="user/supervisor access type";
  MachineID Sender,             desc="What component sent this message";
  MachineID Dest,        desc="What machine receives this message";
  MessageSizeType MessageSize,  desc="size category of the message";
  DataBlock DataBlk,            desc="Data for the cache line (if PUTX)";
  bool Dirty, default="false",  desc="Dirty bit";
  
  //gubiao //davi add  START
  int request_size,    desc="uncached operate size";
  PrefetchBit Prefetch,         desc="Is this a prefetch request";
  int AckCount, default="0",  desc="number of acks in this message";
 //gubiao //davi add  END

 
  bool functionalRead(Packet *pkt) {
    // Only PUTX messages contains the data block
    if (Class == CoherenceClass:PUTX) {
        return testAndRead(addr, DataBlk, pkt);
    }
    return false;
  }

  bool functionalWrite(Packet *pkt) {
    // No check on message type required since the protocol should
    // read data from those messages that contain the block
    return testAndWrite(addr, DataBlk, pkt);
  }
}

// RequestMsg
structure(RequestMsg, desc="...", interface="Message") {
  Addr addr,              desc="Physical address for this request";
  CoherenceRequestType Type,    desc="Type of request (GetS, GetX, PutX, etc)";
  RubyAccessMode AccessMode,    desc="user/supervisor access type";
  MachineID Requestor      ,    desc="What component request";
  NetDest Destination,          desc="What components receive the request, includes MachineType and num";
  MessageSizeType MessageSize,  desc="size category of the message";
  DataBlock DataBlk,            desc="Data for the cache line (if PUTX)";
  int Len;
  bool Dirty, default="false",  desc="Dirty bit";
  PrefetchBit Prefetch,         desc="Is this a prefetch request";

  bool functionalRead(Packet *pkt) {
    // Only PUTX messages contains the data block
    if (Type == CoherenceRequestType:PUTX) {
        return testAndRead(addr, DataBlk, pkt);
    }

    return false;
  }

  bool functionalWrite(Packet *pkt) {
    // No check on message type required since the protocol should
    // read data from those messages that contain the block
    return testAndWrite(addr, DataBlk, pkt);
  }
}

// ResponseMsg
structure(ResponseMsg, desc="...", interface="Message") {
  Addr addr,              desc="Physical address for this request";
  CoherenceResponseType Type,   desc="Type of response (Ack, Data, etc)";
  MachineID Sender,             desc="What component sent the data";
  NetDest Destination,          desc="Node to whom the data is sent";
  DataBlock DataBlk,            desc="Data for the cache line";
  bool Dirty, default="false",  desc="Dirty bit";
  int AckCount, default="0",  desc="number of acks in this message";
  MessageSizeType MessageSize,  desc="size category of the message";

  bool functionalRead(Packet *pkt) {
    // Valid data block is only present in message with following types
    if (Type == CoherenceResponseType:DATA ||
        Type == CoherenceResponseType:DATA_EXCLUSIVE ||
        Type == CoherenceResponseType:MEMORY_DATA) {

        return testAndRead(addr, DataBlk, pkt);
    }

    return false;
  }

  bool functionalWrite(Packet *pkt) {
    // No check on message type required since the protocol should
    // read data from those messages that contain the block
    return testAndWrite(addr, DataBlk, pkt);
  }
}
